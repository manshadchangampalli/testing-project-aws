AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Test-Project
Parameters:
  ClientAccount:
    Description: Client's Account.
    Type: String
    Default: '038416732207'
Globals:
  Function:
    Runtime: nodejs16.x
    CodeUri: ./src/handlers
    Environment:
      Variables:
        MAIN_TABLE_NAME: ItemTable
Resources:
  OpenTestAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: '''*'''
        AllowOrigin: '''*'''
        AllowHeaders: '''Authorization, Content-Type'''
  CrossAccountRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS:
            - Fn::Sub: arn:aws:iam::${ClientAccount}:root
          Action: sts:AssumeRole
      Policies:
      - PolicyName: AccessItemTable
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            Resource:
            - Fn::Sub: arn:aws:dynamodb:ap-south-1:${ClientAccount}:table/ItemTable
  createFruits:
    Type: AWS::Serverless::Function
    Properties:
      Handler: CreateFruit.handler
      Role:
        Fn::GetAtt:
        - CrossAccountRole
        - Arn
      Environment:
        Variables:
          ROLE_ARN:
            Fn::GetAtt:
            - CrossAccountRole
            - Arn
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - dynamodb:ConditionCheckItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          Resource: arn:aws:dynamodb:ap-south-1:${ClientAccount}:table/ItemTable
      Events:
        AddPage:
          Type: Api
          Properties:
            Path: /fruit
            RestApiId:
              Ref: OpenTestAPI
            Method: any
      CodeUri: createFruits
    Metadata:
      SamResourceId: createFruits
